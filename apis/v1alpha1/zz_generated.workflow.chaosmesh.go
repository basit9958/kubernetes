// Copyright Chaos Mesh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by chaos-builder. DO NOT EDIT.

package v1alpha1


import (
	"github.com/pkg/errors"
)


const (
	TypeJVMChaos TemplateType = "JVMChaos"
	TypePhysicalMachineChaos TemplateType = "PhysicalMachineChaos"

)

var allChaosTemplateType = []TemplateType{
	TypeSchedule,
	TypeJVMChaos,
	TypePhysicalMachineChaos,

}

type EmbedChaos struct {
	// +optional
	JVMChaos *JVMChaosSpec `json:"jvmChaos,omitempty"`
	// +optional
	PhysicalMachineChaos *PhysicalMachineChaosSpec `json:"physicalmachineChaos,omitempty"`

}

func (it *EmbedChaos) SpawnNewObject(templateType TemplateType) (GenericChaos, error) {
	switch templateType {
	case TypeJVMChaos:
		result := JVMChaos{}
		result.Spec = *it.JVMChaos
		return &result, nil
	case TypePhysicalMachineChaos:
		result := PhysicalMachineChaos{}
		result.Spec = *it.PhysicalMachineChaos
		return &result, nil

	default:
		return nil, errors.Wrapf(errInvalidValue, "unknown template type %s", templateType)
	}
}

func (it *EmbedChaos) RestoreChaosSpec(root interface{}) error {
	switch chaos := root.(type) {
	case *JVMChaos:
		*it.JVMChaos = chaos.Spec
		return nil
	case *PhysicalMachineChaos:
		*it.PhysicalMachineChaos = chaos.Spec
		return nil

	default:
		return errors.Wrapf(errInvalidValue, "unknown chaos %#v", root)
	}
}

func (it *EmbedChaos) SpawnNewList(templateType TemplateType) (GenericChaosList, error) {
	switch templateType {
	case TypeJVMChaos:
		result := JVMChaosList{}
		return &result, nil
	case TypePhysicalMachineChaos:
		result := PhysicalMachineChaosList{}
		return &result, nil

	default:
		return nil, errors.Wrapf(errInvalidValue, "unknown template type %s", templateType)
	}
}

func (in *JVMChaosList) GetItems() []GenericChaos {
	var result []GenericChaos
	for _, item := range in.Items {
		item := item
		result = append(result, &item)
	}
	return result
}
func (in *PhysicalMachineChaosList) GetItems() []GenericChaos {
	var result []GenericChaos
	for _, item := range in.Items {
		item := item
		result = append(result, &item)
	}
	return result
}

