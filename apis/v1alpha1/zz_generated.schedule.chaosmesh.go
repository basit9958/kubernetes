// Copyright Chaos Mesh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by chaos-builder. DO NOT EDIT.

package v1alpha1


import (
	"github.com/pkg/errors"
)


const (
	ScheduleTypeJVMChaos ScheduleTemplateType = "JVMChaos"
	ScheduleTypePhysicalMachineChaos ScheduleTemplateType = "PhysicalMachineChaos"
	ScheduleTypeWorkflow ScheduleTemplateType = "Workflow"

)

var allScheduleTemplateType = []ScheduleTemplateType{
	ScheduleTypeJVMChaos,
	ScheduleTypePhysicalMachineChaos,
	ScheduleTypeWorkflow,

}

func (it *ScheduleItem) SpawnNewObject(templateType ScheduleTemplateType) (GenericChaos, error) {
	switch templateType {
	case ScheduleTypeJVMChaos:
		result := JVMChaos{}
		result.Spec = *it.JVMChaos
		return &result, nil
	case ScheduleTypePhysicalMachineChaos:
		result := PhysicalMachineChaos{}
		result.Spec = *it.PhysicalMachineChaos
		return &result, nil
	case ScheduleTypeWorkflow:
		result := Workflow{}
		result.Spec = *it.Workflow
		return &result, nil

	default:
		return nil, errors.Wrapf(errInvalidValue, "unknown template type %s", templateType)
	}
}

func (it *ScheduleItem) RestoreChaosSpec(root interface{}) error {
	switch chaos := root.(type) {
	case *JVMChaos:
		*it.JVMChaos = chaos.Spec
		return nil
	case *PhysicalMachineChaos:
		*it.PhysicalMachineChaos = chaos.Spec
		return nil
	case *Workflow:
		*it.Workflow = chaos.Spec
		return nil

	default:
		return errors.Wrapf(errInvalidValue, "unknown chaos %#v", root)
	}
}
